/*:
 * @target MZ
 * @plugindesc the gear plugin that rework the whole Menu System
 * @author Nio Kasgami
 *
 * @help
 */


/*~struct~statusStruct:
 *
 * @param background
 * @desc the layered background
 * @type struct<TilingStruct>[]
 * @default []
 * 
 * @param actor
 * @desc the position of the actor sprite in the menu
 * @type struct<Actor>
 *
 * @param profile
 * @desc the setting for the actor profile text
 * @type struct<actorProfile>
 */

/*~struct~actorProfile:
 *
 * @param name
 * @type struct<TextContainer>
 * @param description
 * @type struct<TextContainer>
 *  
 */
/// COMMON STRUCT =======================================

/*~struct~TextContainer:
 * @param x
 * @type number
 * @param y
 * @type number
 * @param maxWidth
 * @type number
 * @param lineHeight
 * @type number
 *
 * @param align
 * @type select
 * @option LEFT
 * @value left
 * @option CENTER
 * @value center
 * @option RIGHT
 * @value right
 *
 */
/*~struct~TilingStruct:
 * @param bitmap
 * @type file
 * @dir img/menu/status
 * @param coords
 * @type struct<Points>
 * 
 * @param scroll
 * @type struct<Points>
 * 
 * @param type
 * @desc describe if the picture is an single image or a tiling image
 * @type select
 * @option SINGLE
 * @value 0
 * @option ANIMATED
 * @value 1
 * @option TILING
 * @value 2
 */

/*~struct~Actor:
 * @param x
 * @type number
 * @param y
 * @type number
 * @param pivot
 * @type struct<Points>
*/

/*~struct~Points:
 * @param x
 * @desc the x coordinates
 * @type number
 * @param y
 * @desc the y coordinates
 * @type number
 */
///========================================================



//=============================================================================
// ** NOTICE **
//-----------------------------------------------------------------------------
// The code below is generated by a compiler, and is not well suited for human
// reading. If you are interested on the source code, please take a look at
// the Github repository for this plugin!
//=============================================================================

this.Gear=this.Gear||{};this.Gear.Inn=function(exports){"use strict";
/**
     * the helper class who handle plugin parameters
     * @internal
     */class Helper{
/**
         * return the current active script parameters
         * @returns {string}
         */
static find(){const currentScript=document.currentScript.src.match(/.+\/(.+)\.js/)[1];return PluginManager.parameters(currentScript)}
/**
         * parse raw param into an object
         *
         * @static
         * @param {string} parameters
         * @return {object}
         */static parse(parameters){function parseParameters(object){try{return JSON.parse(object,((key,value)=>{try{return parseParameters(value)}catch(e){return value}}))}catch(e){return object}}return parseParameters(JSON.stringify(parameters))}
/**
         * load a bitmap from a defined directory
         * @param directory
         * @param filename
         * @returns {Bitmap}
         */static loadCustomDir(directory,filename){return window.ImageManager.loadBitmap(`img/${directory}/`,filename)}}const rawParams=Helper.find();
/**
     *
     * @type {InnParameters}
     */const PARAMS=Helper.parse(rawParams);class InnManager{static _data=PARAMS;static _inns=PARAMS.inns;static _func={};static _defaultInn={};static _id="";constructor(){throw new Error("this is a static class")}
/**
         * init the InnManager with an ID
         * @param {string} id
         */static init(id){this._id=id}
/**
         * return the whole array of inns
         * @returns {Inn[]}
         */static inns(){return this._inns}
/**
         * return the active inn
         * @returns {Inn}
         */static inn(){let index=this.findInn(this._id);return this._inns[index]}
/**
         * return the inn display name
         * @returns {string}
         */static innName(){return this.inn().displayName}
/**
         * return the inn id
         * @returns {string}
         */static innId(){return this.inn().id}
/**
         * return the whole array of rooms for the active inn
         * @returns {Room[]}
         */static rooms(){return this.inn().rooms}
/**
         * return a specific room for the active inn
         * @param {number} id - the room index
         * @returns {Room}
         */static room(id){return this.rooms()[id]}
/**
         * register a custom action to use for a room
         * @param {string} actionName - the action name
         * @param {()=> void} callback - the action function
         */static registerAction(actionName,callback){this._func[actionName]=callback}
/**
         * call a specific action or a room
         * @param {string} actionName - the action name
         * @param {any[]} args - the action arguments
         */static executeAction(actionName,args){if(this._func.hasOwnProperty(actionName)){this._func[actionName].call(this,args)}}
/**
         * find a inn via it's id
         * @param {string} name - the inn name
         * @returns {number}
         */static findInn(name){let index=0;for(let i=0;i<this._inns.length;i++){const{id:id}=this._inns[i];if(id===name){index=0;break}}return index}}exports.InnManager=InnManager;Object.defineProperty(exports,"__esModule",{value:true});return exports}({});
